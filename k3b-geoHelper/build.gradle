apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

// vvv maven upload stuff
group = 'com.github.k3b'
description = "k3b-geoHelper"
archivesBaseName = "k3b-geoHelper"

version = globalVersion

print description + ":" + version + "\n"
// ^^^ maven upload stuff

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

dependencies {
    // compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.11'
    testCompile 'org.slf4j:slf4j-simple:1.7.7@jar'
    // testCompile fileTree(dir: 'resources', include: ['*.*'])
    compile 'org.slf4j:slf4j-api:1.7.7@jar'
    //  compile 'org.slf4j:slf4j-api:1.7.6@jar'
    // compile 'com.darwinsys:hirondelle-date4j:1.5.1'
    // compile 'joda-time:joda-time:2.7'
}

task testZip(type: Zip, dependsOn: [test, jacocoTestReport]) {
    group = 'Distribution'
    classifier = 'tests'
    description = "Builds -${classifier} archive containing testresults and codecoverage ."

    from('src/dist') {
        // include 'changelog.txt'
    }

    from ('build/reports/tests' ) {
        into 'tests'
    }

    from ('build/reports/jacoco/test/html' ) {
        into 'codecoverage'
    }
}

task reports (dependsOn: [test, jacocoTestReport, javadoc])

// workaround because android-studio does not make the test resources available
// see https://code.google.com/p/android/issues/detail?id=64887#c13
task copyTestResources(type: Copy) {
    from sourceSets.test.resources
    into sourceSets.test.output.classesDir
}
processTestResources.dependsOn copyTestResources

// vvv maven upload stuff

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    description = "Builds -${classifier} archive containing api-doc."
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    description = "Builds -${classifier} archive containing source code."
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

if (hasProperty("signing.keyId")) {
	signing {
		print "signing archives\n"
		sign configurations.archives
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			if (hasProperty("signing.keyId")) {
				beforeDeployment { 
					MavenDeployment deployment -> signing.signPom(deployment) 
				}
			}

			repository(url: uploadRepository) {
				print "uploading to repository '" + uploadRepository + "'\n"
				if (hasProperty('sonatypeUsername') && hasProperty('sonatypeUsername')) {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
			}

			pom.project {
				name 'k3b-geoHelper'
				packaging 'jar'
				// optionally artifactId can be defined here 
				description 'A j2se geo support library that is compatible with Android.'
				url 'https://github.com/k3b/k3b-geoHelper'

				scm {
					url 'http://www.github.com/k3b/k3b-geoHelper'
					connection 'scm:git://github.com/k3b/k3b-geoHelper.git'
					developerConnection 'scm:git://github.com/k3b/k3b-geoHelper.git'
				}

				licenses {
					license {
						name 'The Apache License, Version 2.0'
						url 'https://raw.github.com/k3b/k3b-geoHelper/master/license'
						distribution 'repo'
					}
				}

				developers {
					developer {
						id 'k3b'
						name 'Klaus Tevos'
						email 'klaus3b-mvn@yahoo.de'
					}
				}
			}
		}
	}

}
